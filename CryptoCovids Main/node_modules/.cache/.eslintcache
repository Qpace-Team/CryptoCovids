[{"/Users/Neo/WorkSpace/Git/CryptoCovids/CryptoCovids Main/src/index.js":"1","/Users/Neo/WorkSpace/Git/CryptoCovids/CryptoCovids Main/src/components/Minter.js":"2"},{"size":250,"mtime":1638309946055,"results":"3","hashOfConfig":"4"},{"size":8625,"mtime":1638412237998,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"opsp35",{"filePath":"8","messages":"9","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/Neo/WorkSpace/Git/CryptoCovids/CryptoCovids Main/src/index.js",[],"/Users/Neo/WorkSpace/Git/CryptoCovids/CryptoCovids Main/src/components/Minter.js",["11","12","13","14","15","16","17","18"],"import { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport contract from \"../contracts/contract.json\";\n\nconst initialInfoState = {\n  connected: false,\n  status: null,\n  account: null,\n  web3: null,\n  contract: null,\n  address: null,\n  contractJSON: null,\n};\n\nconst initialMintState = {\n  loading: false,\n  status: `Connect your wallet and Mint your ${contract.name}`,\n  amount: 1,\n  supply: \"0\",\n  cost: \"0\",\n};\n\n\nfunction Minter() {\n  const [info, setInfo] = useState(initialInfoState);\n  const [mintInfo, setMintInfo] = useState(initialMintState);\n\n  console.log(info);\n\n  const init = async (_request, _contractJSON) => {\n    if (window.ethereum.isMetaMask) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: _request,\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == _contractJSON.chain_id) {\n          let web3 = new Web3(window.ethereum);\n          setInfo((prevState) => ({\n            ...prevState,\n            connected: true,\n            status: null,\n            account: accounts[0],\n            web3: web3,\n            contract: new web3.eth.Contract(\n              _contractJSON.abi,\n              _contractJSON.address\n            ),\n            contractJSON: _contractJSON,\n          }));\n        } else {\n          setInfo(() => ({\n            ...initialInfoState,\n            status: `Change network to ${_contractJSON.chain}.`,\n          }));\n        }\n      } catch (err) {\n        console.log(err.message);\n        setInfo(() => ({\n          ...initialInfoState,\n        }));\n      }\n    } else {\n      setInfo(() => ({\n        ...initialInfoState,\n        status: \"Please install Metamask.\",\n      }));\n    }\n  };\n\n  const initListeners = () => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n  };\n\n  const getSupply = async () => {\n    const params = {\n      to: info.contractJSON.address,\n      from: info.account,\n      data: info.contract.methods.totalSupply().encodeABI(),\n    };\n    try {\n      const result = await window.ethereum.request({\n        method: \"eth_call\",\n        params: [params],\n      });\n      console.log(info.web3.utils.hexToNumberString(result));\n      setMintInfo((prevState) => ({\n        ...prevState,\n        supply: info.web3.utils.hexToNumberString(result),\n      }));\n    } catch (err) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        supply: 0,\n      }));\n    }\n  };\n\n  const getCost = async () => {\n    const params = {\n      to: info.contractJSON.address,\n      from: info.account,\n      data: info.contract.methods.cost().encodeABI(),\n    };\n    try {\n      const result = await window.ethereum.request({\n        method: \"eth_call\",\n        params: [params],\n      });\n      console.log(info.web3.utils.hexToNumberString(result));\n      setMintInfo((prevState) => ({\n        ...prevState,\n        cost: info.web3.utils.hexToNumberString(result),\n      }));\n    } catch (err) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        cost: \"0\",\n      }));\n    }\n  };\n\n  const mint = async () => {\n    const params = {\n      to: info.contractJSON.address,\n      from: info.account,\n      value: String(\n        info.web3.utils.toHex(Number(mintInfo.cost) * mintInfo.amount)\n      ),\n      data: info.contract.methods\n        .mint(info.account, mintInfo.amount)\n        .encodeABI(),\n    };\n    try {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        loading: true,\n        status: `Minting ${mintInfo.amount} CryptoCovid ...`,\n      }));\n      const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [params],\n      });\n      setMintInfo((prevState) => ({\n        ...prevState,\n        loading: false,\n        status:\n          \"Great! Be patient, Your CryptoCovids will show up in our Gallery and marketplaces such as Opensea, once the transaction is successful. You can check your transaction on your MetaMask.\",\n      }));\n      getSupply();\n    } catch (err) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        loading: false,\n        status: err.message,\n      }));\n    }\n  };\n\n  const updateAmount = (newAmount) => {\n    if (newAmount <= 20 && newAmount >= 1) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        amount: newAmount,\n      }));\n    }\n  };\n\n  const connectToContract = (_contractJSON) => {\n    init(\"eth_requestAccounts\", _contractJSON);\n  };\n\n  useEffect(() => {\n    connectToContract(contract);\n    initListeners();\n  }, []);\n\n  useEffect(() => {\n    if (info.connected) {\n      getSupply();\n      getCost();\n    }\n  }, [info.connected]);\n\n  return (\n      <div className=\"card icon-box2\">\n          <div class=\"icon\"><i class=\"bx bxl-creative-commons\"></i></div>\n        {mintInfo.supply < contract.total_supply ? (\n          <div className=\"card_body\">\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <button\n                disabled={!info.connected || mintInfo.cost == \"0\"}\n                className=\"small_button btn btn-outline-dark disabled\"\n                onClick={() => updateAmount(mintInfo.amount - 1)}\n              >\n                -\n              </button>\n              <div style={{ width: 10 }}></div>\n              <button\n                disabled={!info.connected || mintInfo.cost == \"0\"}\n                className=\"button gap-6 col-10  btn btn-outline-primary disabled\"\n                onClick={() => mint()}\n              >\n                Mint {mintInfo.amount}\n              </button>\n              <div style={{ width: 10 }}></div>\n              <button\n                disabled={!info.connected || mintInfo.cost == \"0\"}\n                className=\"small_button btn btn-outline-dark disabled\"\n                onClick={() => updateAmount(mintInfo.amount + 1)}\n              >\n                +\n              </button>\n            </div>\n            {info.connected ? (\n              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n                  {info.web3?.utils.fromWei(mintInfo.cost, \"ether\") *\n                    mintInfo.amount}{\" \"}\n                  {contract.chain_symbol}\n                </p>\n                <div style={{ width: 20 }}></div>\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n                  |\n                </p>\n                <div style={{ width: 20 }}></div>\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n                  {mintInfo.supply}/{contract.total_supply}\n                </p>\n              </div>\n            ) : null}\n            {mintInfo.status ? (\n              <p className=\"statusText\">{mintInfo.status}</p>\n            ) : null}\n            {info.status ? (\n              <p className=\"statusText\" style={{ color: \"var(--error)\" }}>\n                {info.status}\n              </p>\n            ) : null}\n          </div>\n        ) : (\n          <div className=\"card_body\">\n            <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n              {mintInfo.supply}/{contract.total_supply}\n            </p>\n            <p className=\"statusText\">\n              We've sold out! .You can still buy and trade the {contract.name}{\" \"}\n              on marketplaces such as <a href=\"https://opensea.io\">Opensea</a>.\n            </p>\n          </div>\n        )}\n        <div className=\"card_footer\">\n          <button\n            className=\"button gap-2 col-10  btn btn-outline-warning\"\n            onClick={() => connectToContract(contract)}\n          >\n            {info.account ? \"Connected\" : \"Connect Wallet\"}\n          </button>\n          {info.connected ? (\n            <span className=\"accountText\">\n              {String(info.account).substring(0, 6) +\n                \"...\" +\n                String(info.account).substring(38)}\n            </span>\n          ) : null}\n        </div>\n        <a\n          style={{\n            position: \"absolute\",\n            bottom: 55,\n            left: -75,\n          }}\n          className=\"_90\"\n          target=\"_blank\"\n          href=\"https://etherscan.io/\"\n        >\n          View Contract\n        </a>\n      </div>\n  );\n}\n\nexport default Minter;\n",{"ruleId":"19","severity":1,"message":"20","line":39,"column":23,"nodeType":"21","messageId":"22","endLine":39,"endColumn":25},{"ruleId":"23","severity":1,"message":"24","line":149,"column":13,"nodeType":"25","messageId":"26","endLine":149,"endColumn":19},{"ruleId":"27","severity":1,"message":"28","line":185,"column":6,"nodeType":"29","endLine":185,"endColumn":8,"suggestions":"30"},{"ruleId":"27","severity":1,"message":"31","line":192,"column":6,"nodeType":"29","endLine":192,"endColumn":22,"suggestions":"32"},{"ruleId":"19","severity":1,"message":"20","line":207,"column":60,"nodeType":"21","messageId":"22","endLine":207,"endColumn":62},{"ruleId":"19","severity":1,"message":"20","line":215,"column":60,"nodeType":"21","messageId":"22","endLine":215,"endColumn":62},{"ruleId":"19","severity":1,"message":"20","line":223,"column":60,"nodeType":"21","messageId":"22","endLine":223,"endColumn":62},{"ruleId":"33","severity":1,"message":"34","line":282,"column":9,"nodeType":"35","endLine":291,"endColumn":10},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'txHash' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'connectToContract'. Either include it or remove the dependency array.","ArrayExpression",["36"],"React Hook useEffect has missing dependencies: 'getCost' and 'getSupply'. Either include them or remove the dependency array.",["37"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement",{"desc":"38","fix":"39"},{"desc":"40","fix":"41"},"Update the dependencies array to be: [connectToContract]",{"range":"42","text":"43"},"Update the dependencies array to be: [getCost, getSupply, info.connected]",{"range":"44","text":"45"},[4747,4749],"[connectToContract]",[4846,4862],"[getCost, getSupply, info.connected]"]